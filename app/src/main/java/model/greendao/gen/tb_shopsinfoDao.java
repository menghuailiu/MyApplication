package model.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import patrickstar.com.myapplication.model.tb_shopsinfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_SHOPSINFO".
*/
public class tb_shopsinfoDao extends AbstractDao<tb_shopsinfo, Long> {

    public static final String TABLENAME = "TB_SHOPSINFO";

    /**
     * Properties of entity tb_shopsinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Pwd = new Property(2, String.class, "pwd", false, "PWD");
        public final static Property Sname = new Property(3, String.class, "sname", false, "SNAME");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Tel = new Property(5, String.class, "tel", false, "TEL");
        public final static Property Photo = new Property(6, String.class, "photo", false, "PHOTO");
        public final static Property Opentime = new Property(7, String.class, "opentime", false, "OPENTIME");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
    };


    public tb_shopsinfoDao(DaoConfig config) {
        super(config);
    }
    
    public tb_shopsinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_SHOPSINFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"PWD\" TEXT," + // 2: pwd
                "\"SNAME\" TEXT," + // 3: sname
                "\"ADDRESS\" TEXT," + // 4: address
                "\"TEL\" TEXT," + // 5: tel
                "\"PHOTO\" TEXT," + // 6: photo
                "\"OPENTIME\" TEXT," + // 7: opentime
                "\"REMARK\" TEXT);"); // 8: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_SHOPSINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, tb_shopsinfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(4, sname);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(7, photo);
        }
 
        String opentime = entity.getOpentime();
        if (opentime != null) {
            stmt.bindString(8, opentime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, tb_shopsinfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(4, sname);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(7, photo);
        }
 
        String opentime = entity.getOpentime();
        if (opentime != null) {
            stmt.bindString(8, opentime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public tb_shopsinfo readEntity(Cursor cursor, int offset) {
        tb_shopsinfo entity = new tb_shopsinfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // opentime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, tb_shopsinfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOpentime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(tb_shopsinfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(tb_shopsinfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
